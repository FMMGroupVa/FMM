gridList[[j]]$omega
step1FMM(gridList[[j]], vData)
step1FMM(gridList2[[j]], vData2)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData, timePoints)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData2, timePoints2)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
library(FMM)
fit<-fitFMM(vData = vData, timePoints = timePoints)
2.673696e-01
alphaGrid = seqTimes(48)
omegaGrid = exp(seq(log(0.001), log(1), length.out = 25))[1:24]
gridList = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints)
gridList2 = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints2)
j = 819
gridList[[j]]$base%*%vData - gridList2[[j]]$base%*%vData2
gridList[[j]]$alpha
gridList[[j]]$omega
step1FMM(gridList[[j]], vData)
step1FMM(gridList2[[j]], vData2)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData, timePoints)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData2, timePoints2)
library(FMM)
library(FMM)
fit<-fitFMM(vData = vData, timePoints = timePoints)
alphaGrid = seqTimes(48)
omegaGrid = exp(seq(log(0.001), log(1), length.out = 25))[1:24]
gridList = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints)
gridList2 = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints2)
j = 819
gridList[[j]]$base%*%vData - gridList2[[j]]$base%*%vData2
step1FMM(gridList[[j]], vData)
step1FMM(gridList2[[j]], vData2)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData, timePoints)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData2, timePoints2)
library(FMM)
alphaGrid = seqTimes(48)
omegaGrid = exp(seq(log(0.001), log(1), length.out = 25))[1:24]
gridList = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints)
gridList2 = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints2)
j = 819
gridList[[j]]$base%*%vData - gridList2[[j]]$base%*%vData2
gridList[[j]]$alpha
gridList[[j]]$omega
step1FMM(gridList[[j]], vData)
step1FMM(gridList2[[j]], vData2)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData, timePoints)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData2, timePoints2)
step1FMM <- function(optBase, vData) {
pars <- optBase[["base"]] %*% vData
# M + delta*cos(2*atan...) + gamma*sin(2*atan...)
mobiusRegression <- pars[1] + pars[2]*optBase[["cost"]] + pars[3]*optBase[["sint"]]
residualSS <- sum((vData - mobiusRegression)^2)
aParameter <- sqrt(pars[2]^2 + pars[3]^2)
betaParameter <- atan2(-pars[3], pars[2])
return(c(pars[1], aParameter, optBase[["alpha"]], betaParameter,
optBase[["omega"]], residualSS))
}
step1FMM(gridList[[j]], vData)
step1FMM(gridList2[[j]], vData2)
step1FMMOld <- function(alphaOmegaParameters, vData, timePoints) {
alphaParameter <- alphaOmegaParameters[1]
omegaParameter <- alphaOmegaParameters[2]
mobiusTerm <- 2*atan(omegaParameter*tan((timePoints - alphaParameter)/2))
tStar <- alphaParameter + mobiusTerm
# Given alpha and omega, a cosinor model is computed with t* in
# order to obtain delta (cosCoeff) and gamma (sinCoeff).
# Linear Model exact expressions are used to improve performance.
costStar <- cos(tStar)
sentstar <- sin(tStar)
covMatrix <- stats::cov(cbind(vData, costStar, sentstar))
denominator <- covMatrix[2,2]*covMatrix[3,3] - covMatrix[2,3]^2
cosCoeff <- (covMatrix[1,2]*covMatrix[3,3] -
covMatrix[1,3]*covMatrix[2,3])/denominator
sinCoeff <- (covMatrix[1,3]*covMatrix[2,2] -
covMatrix[1,2]*covMatrix[2,3])/denominator
mParameter <- mean(vData) - cosCoeff*mean(costStar) - sinCoeff*mean(sentstar)
phiEst <- atan2(-sinCoeff, cosCoeff)
aParameter <- sqrt(cosCoeff^2 + sinCoeff^2)
betaParameter <- (phiEst+alphaParameter)%%(2*pi)
mobiusRegression <- mParameter + aParameter*cos(betaParameter + mobiusTerm)
residualSS <- sum((vData - mobiusRegression)^2)
return(c(mParameter, aParameter, alphaParameter, betaParameter,
omegaParameter, residualSS))
}
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData, timePoints)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData2, timePoints2)
step1FMM(gridList[[j]], vData)
step1FMM(gridList2[[j]], vData2)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData, timePoints)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData2, timePoints2)
library(FMM)
alphaGrid = seqTimes(48)
omegaGrid = exp(seq(log(0.001), log(1), length.out = 25))[1:24]
gridList = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints)
gridList2 = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints2)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
step1FMM(gridList[[1]], vData = vData)
step1FMM(gridList2[[1]], vData = vData2)
alphaGrid = seqTimes(48)
omegaGrid = exp(seq(log(0.001), log(1), length.out = 25))[1:24]
gridList = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints)
gridList2 = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints2)
j = 819
gridList[[j]]$base%*%vData - gridList2[[j]]$base%*%vData2
gridList[[j]]$alpha
gridList[[j]]$omega
step1FMM(gridList[[j]], vData)
step1FMM(gridList2[[j]], vData2)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData, timePoints)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData2, timePoints2)
precalculateBase <- function(alphaGrid, omegaGrid, timePoints){
# Expanded grid: each row contains a pair (alpha, omega)
grid <- expand.grid(alphaGrid, omegaGrid)
optBase <- apply(grid, 1, FUN = function(x){
x <- as.numeric(x)
nonlinearMob = 2*atan(x[2]*tan((timePoints-x[1])/2))
M <- cbind(timePoints*0+1, cos(nonlinearMob), sin(nonlinearMob))
return(list(base = solve(t(M)%*%M)%*%t(M),
alpha = x[1], omega = x[2],
cost = cos(nonlinearMob), sint = sin(nonlinearMob)))
}, simplify = FALSE)
return(optBase)
}
nObs <- length(vData)
grid <- expand.grid(alphaGrid, omegaGrid)
step1OutputNames <- c("M","A","alpha","beta","omega","RSS")
step1A <- matrix(unlist(lapply(FUN = step1FMM, X = gridList, vData = vData)),
ncol = 6, byrow = T)
step1B <- matrix(unlist(lapply(FUN = step1FMM, X = gridList2, vData = vData2)),
ncol = 6, byrow = T)
step1OutputNames <- c("M","A","alpha","beta","omega","RSS")
colnames(step1A) <- step1OutputNames
colnames(step1B) <- step1OutputNames
bestPar <- bestStep1(vData, step1A)
bestPar <- bestStep1(vData, step1B)
step1A[j,]
library(FMM)
library(FMM)
library(FMM)
alphaGrid = seqTimes(48)
omegaGrid = exp(seq(log(0.001), log(1), length.out = 25))[1:24]
gridList = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints)
gridList2 = precalculateBase(alphaGrid = alphaGrid, omegaGrid = omegaGrid,
timePoints = timePoints2)
j = 819
gridList[[j]]$base%*%vData - gridList2[[j]]$base%*%vData2
gridList[[j]]$alpha
gridList[[j]]$omega
step1FMM(gridList[[j]], vData)
step1FMM(gridList2[[j]], vData2)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData, timePoints)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData2, timePoints2)
step1FMM(gridList[[j]], vData)-step1FMM(gridList2[[j]], vData2)
step1A <- matrix(unlist(lapply(FUN = step1FMM, X = gridList, vData = vData)),
ncol = 6, byrow = T)
step1B <- matrix(unlist(lapply(FUN = step1FMM, X = gridList2, vData = vData2)),
ncol = 6, byrow = T)
step1A[j,]
step1A[j,]
step1B[j,]
step1OutputNames <- c("M","A","alpha","beta","omega","RSS")
colnames(step1A) <- step1OutputNames
colnames(step1B) <- step1OutputNames
bestPar <- bestStep1(vData, step1A)
bestPar <- bestStep1(vData, step1B)
################################################################################
# Internal function: to find the optimal initial parameter estimation
# Arguments:
#    vData: data to be fitted an FMM model.
#    step1: a data.frame with estimates of
#           M, A, alpha, beta, omega, RSS as columns.
# Returns the optimal row of step1 argument.
# optimum: minimum RSS with several stability conditions.
################################################################################
bestStep1 <- function(vData, step1){
# step1 in decreasing order by RSS
orderedModelParameters <- order(step1[,"RSS"])
maxVData <- max(vData)
minVData <- min(vData)
nObs <- length(vData)
# iterative search: go through rows ordered step 1
#    until the first one that verifies the stability conditions
bestModelFound <- FALSE
i <- 1
while(!bestModelFound){
# parameters
mParameter <- step1[orderedModelParameters[i], "M"]
aParameter <- step1[orderedModelParameters[i], "A"]
sigma <- sqrt(step1[orderedModelParameters[i], "RSS"]*nObs/(nObs-5))
# stability conditions
amplitudeUpperBound <- mParameter + aParameter
amplitudeLowerBound <- mParameter - aParameter
rest1 <- amplitudeUpperBound <= maxVData + 1.96*sigma
rest2 <- amplitudeLowerBound >= minVData - 1.96*sigma
# it is necessary to check that there are no NA,
# because it can be an extreme solution
if(is.na(rest1)) rest1 <- FALSE
if(is.na(rest2)) rest2 <- FALSE
if(rest1 & rest2){
bestModelFound <- TRUE
} else {
i <- i+1
}
if(i > nrow(step1))
return(NULL)
}
print(i)
return(step1[orderedModelParameters[i],])
}
bestPar <- bestStep1(vData, step1A)
bestPar <- bestStep1(vData, step1B)
j = 199
gridList[[j]]$base%*%vData - gridList2[[j]]$base%*%vData2
gridList[[j]]$alpha
gridList[[j]]$omega
step1FMM(gridList[[j]], vData)
step1FMM(gridList2[[j]], vData2)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData, timePoints)
step1FMMOld(c(gridList[[j]]$alpha, gridList[[j]]$omega), vData2, timePoints2)
precalculateBase <- function(alphaGrid, omegaGrid, timePoints){
# Expanded grid: each row contains a pair (alpha, omega)
grid <- expand.grid(alphaGrid, omegaGrid)
optBase <- apply(grid, 1, FUN = function(x){
x <- as.numeric(x)
nonlinearMob = 2*atan(x[2]*tan((timePoints-x[1])/2))
M <- cbind(timePoints*0+1, cos(nonlinearMob), sin(nonlinearMob))
return(list(base = solve(t(M)%*%M)%*%t(M),
alpha = x[1], omega = x[2],
cost = cos(nonlinearMob), sint = sin(nonlinearMob)))
}, simplify = FALSE)
return(optBase)
}
nObs <- length(vData)
grid <- expand.grid(alphaGrid, omegaGrid)
step1OutputNames <- c("M","A","alpha","beta","omega","RSS")
step1A <- matrix(unlist(lapply(FUN = step1FMM, X = gridList, vData = vData)),
ncol = 6, byrow = T)
step1B <- matrix(unlist(lapply(FUN = step1FMM, X = gridList2, vData = vData2)),
ncol = 6, byrow = T)
step1A[j,]
step1B[j,]
step1OutputNames <- c("M","A","alpha","beta","omega","RSS")
colnames(step1A) <- step1OutputNames
colnames(step1B) <- step1OutputNames
bestPar <- bestStep1(vData, step1A)
bestPar <- bestStep1(vData, step1B)
bestPar
step1A[j,]
step1B[j,]
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
plotFMM(fit)
plotFMM(fit2)
optim(par = c(6.2831853, 0.1467799268), fn = step2FMM, vData = vData2,
timePoints = timePoints2, omegaMax = 1)
################################################################################
# Internal function: second step of FMM fitting process
# Arguments:
#   parameters: M, A, alpha, beta, omega initial parameter estimations
#   vData: data to be fitted an FMM model.
#   timePoints: one single period time points.
#   omegaMax: max value for omega.
################################################################################
step2FMM <- function(parameters, vData, timePoints, omegaMax){
nObs <- length(timePoints)
nonlinearMob = 2*atan(parameters[2]*tan((timePoints-parameters[1])/2))
M <- cbind(rep(1, nObs), cos(nonlinearMob), sin(nonlinearMob))
pars <- .lm.fit(M, vData, tol = 1e-15)$coefficients
# FMM model and residual sum of squares
modelFMM <- pars[1] + pars[2]*cos(nonlinearMob) + pars[3]*sin(nonlinearMob)
residualSS <- sum((modelFMM - vData)^2)
sigma <- sqrt(residualSS/(nObs - 5))
aParameter <- sqrt(pars[2]^2 + pars[3]^2)
# When amplitude condition is valid, it returns RSS
# else it returns infinite.
amplitudeUpperBound <- pars[1] + aParameter
amplitudeLowerBound <- pars[1] - aParameter
rest1 <- amplitudeUpperBound <= max(vData) + 1.96*sigma
rest2 <- amplitudeLowerBound >= min(vData) - 1.96*sigma
# Other integrity conditions that must be met
#rest3 <- aParameter > 0  # A > 0 # This is always true
#plot(timePoints, vData)
#lines(timePoints, modelFMM)
rest4 <- parameters[2] > 0.0001  &  parameters[2] < omegaMax # omega in (0, omegaMax)
# if(rest1 & rest2 & rest4)
#   return(residualSS)
# else
#   return(Inf)
if(parameters[2] > 0.0001  &  parameters[2] < omegaMax)
return(residualSS)
else
return(Inf)
}
optim(par = c(6.2831853, 0.1467799268), fn = step2FMM, vData = vData2,
timePoints = timePoints2, omegaMax = 1)
optim(par = c(6.2831853, 0.1467799268), fn = step2FMM, vData = vData,
timePoints = timePoints, omegaMax = 1)
optim(par = c(6.2831853, 0.1467799268), fn = step2FMM, vData = vData,
timePoints = timePoints, omegaMax = 1)
optim(par = c(6.2831853, 0.1467799268), fn = step2FMM, vData = vData2,
timePoints = timePoints2, omegaMax = 1)
2*pi+++1
-0.1%%(2*pi)
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
BASE819A <- read.table("BASE819A.txt")
BASE819B <- read.table("BASE819B.txt")
BASE819A
BASE819B
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
BASE819A <- read.table("BASE819A.txt")
BASE819B <- read.table("BASE819B.txt")
BASE819A
BASE819B
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
BASE819A <- read.table("BASE819A.txt")
BASE819B <- read.table("BASE819B.txt")
BASE819A
BASE819B
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
plotFMM(fit)
plotFMM(fit2)
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2)
fit
fit2
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2, nBack=2)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2, nback = 2)
fit2
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1, sigmaNoise = 0.05)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1, sigmaNoise = 0.01)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit
library(FMM)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
vData2=YY$y[c(1:50,200:150)]
timePoints2=YY$t[c(1:50,200:150)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit2<-fitFMM(vData = vData2, timePoints = timePoints2, nback = 2)
fit<-fitFMM(vData = vData, timePoints = timePoints)
plotFMM(fit)
plotFMM(fit2)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
plotFMM(fit)
plotFMM(fit, components = T)
library(FMM)
fit<-fitFMM(vData = vData, timePoints = timePoints)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
plotFMM(fit)
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
plotFMM(fit)
fit
library(FMM)
fit
par(mfrow = c(1,1))
YY<-generateFMM(M=0, A=1, alpha=1, beta=1, omega=0.1)
vData=YY$y[c(1:50,150:200)]
timePoints=YY$t[c(1:50,150:200)]
fit<-fitFMM(vData = vData, timePoints = timePoints)
fit
